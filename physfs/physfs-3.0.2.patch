diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4a67c27..6a30694 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -74,6 +74,7 @@ set(PHYSFS_SRCS
     src/physfs_platform_posix.c
     src/physfs_platform_unix.c
     src/physfs_platform_windows.c
+    src/physfs_platform_wiiu.c
     src/physfs_platform_os2.c
     src/physfs_platform_qnx.c
     src/physfs_archiver_dir.c
@@ -302,4 +303,3 @@ if(PHYSFS_BUILD_TEST)
 endif()
 
 # end of CMakeLists.txt ...
-
diff --git a/src/physfs_internal.h b/src/physfs_internal.h
index 2912623..ec38622 100644
--- a/src/physfs_internal.h
+++ b/src/physfs_internal.h
@@ -107,6 +107,10 @@ const void *__PHYSFS_winrtCalcBaseDir(void);
 const void *__PHYSFS_winrtCalcPrefDir(void);
 #endif
 
+#ifdef PHYSFS_PLATFORM_WIIU
+char *__PHYSFS_wiiuCalcUserDir(void);
+#endif
+
 /* atomic operations. */
 #if defined(_MSC_VER) && (_MSC_VER >= 1500)
 #include <intrin.h>
@@ -144,7 +148,11 @@ int __PHYSFS_ATOMIC_DECR(int *ptrval);
  * NEVER forget to use smallFree: it may not be a pointer from the stack.
  * NEVER forget to check for NULL...allocation can fail here, of course!
  */
+#ifdef PHYSFS_PLATFORM_WIIU
+#define __PHYSFS_SMALLALLOCTHRESHOLD 0
+#else
 #define __PHYSFS_SMALLALLOCTHRESHOLD 256
+#endif
 void *__PHYSFS_initSmallAlloc(void *ptr, const size_t len);
 
 #define __PHYSFS_smallAlloc(bytes) ( \
diff --git a/src/physfs_platform_posix.c b/src/physfs_platform_posix.c
index fa2159c..e8c3077 100644
--- a/src/physfs_platform_posix.c
+++ b/src/physfs_platform_posix.c
@@ -25,6 +25,12 @@
 
 #include "physfs_internal.h"
 
+#ifdef PHYSFS_PLATFORM_WIIU
+#include <coreinit/thread.h>
+#include <coreinit/mutex.h>
+#include <coreinit/debug.h>
+#endif
+
 
 static PHYSFS_ErrorCode errcodeFromErrnoError(const int err)
 {
@@ -60,33 +66,41 @@ static inline PHYSFS_ErrorCode errcodeFromErrno(void)
 
 static char *getUserDirByUID(void)
 {
-    uid_t uid = getuid();
-    struct passwd *pw;
-    char *retval = NULL;
-
-    pw = getpwuid(uid);
-    if ((pw != NULL) && (pw->pw_dir != NULL) && (*pw->pw_dir != '\0'))
-    {
-        const size_t dlen = strlen(pw->pw_dir);
-        const size_t add_dirsep = (pw->pw_dir[dlen-1] != '/') ? 1 : 0;
-        retval = (char *) allocator.Malloc(dlen + 1 + add_dirsep);
-        if (retval != NULL)
+    #ifdef PHYSFS_PLATFORM_WIIU
+        return __PHYSFS_wiiuCalcUserDir();
+    #else
+        uid_t uid = getuid();
+        struct passwd *pw;
+        char *retval = NULL;
+
+        pw = getpwuid(uid);
+        if ((pw != NULL) && (pw->pw_dir != NULL) && (*pw->pw_dir != '\0'))
         {
-            strcpy(retval, pw->pw_dir);
-            if (add_dirsep)
+            const size_t dlen = strlen(pw->pw_dir);
+            const size_t add_dirsep = (pw->pw_dir[dlen-1] != '/') ? 1 : 0;
+            retval = (char *) allocator.Malloc(dlen + 1 + add_dirsep);
+            if (retval != NULL)
             {
-                retval[dlen] = '/';
-                retval[dlen+1] = '\0';
+                strcpy(retval, pw->pw_dir);
+                if (add_dirsep)
+                {
+                    retval[dlen] = '/';
+                    retval[dlen+1] = '\0';
+                } /* if */
             } /* if */
         } /* if */
-    } /* if */
-    
-    return retval;
+        
+        return retval;
+    #endif
 } /* getUserDirByUID */
 
 
 char *__PHYSFS_platformCalcUserDir(void)
 {
+    #ifdef PHYSFS_PLATFORM_WIIU
+        return __PHYSFS_wiiuCalcUserDir();
+    #endif
+
     char *retval = NULL;
     char *envr = getenv("HOME");
 
@@ -299,7 +313,13 @@ int __PHYSFS_platformDelete(const char *path)
 int __PHYSFS_platformStat(const char *fname, PHYSFS_Stat *st, const int follow)
 {
     struct stat statbuf;
-    const int rc = follow ? stat(fname, &statbuf) : lstat(fname, &statbuf);
+    
+    #ifdef PHYSFS_PLATFORM_WIIU
+        const int rc = stat(fname, &statbuf);
+    #else
+        const int rc = follow ? stat(fname, &statbuf) : lstat(fname, &statbuf);
+    #endif
+    
     BAIL_IF(rc == -1, errcodeFromErrno(), 0);
 
     if (S_ISREG(statbuf.st_mode))
@@ -330,7 +350,12 @@ int __PHYSFS_platformStat(const char *fname, PHYSFS_Stat *st, const int follow)
     st->createtime = statbuf.st_ctime;
     st->accesstime = statbuf.st_atime;
 
-    st->readonly = (access(fname, W_OK) == -1);
+    #ifdef PHYSFS_PLATFORM_WIIU /* shortcut */
+        st->readonly   = !(statbuf.st_mode & S_IWRITE);
+    #else
+        st->readonly = (access(fname, W_OK) == -1);
+    #endif
+
     return 1;
 } /* __PHYSFS_platformStat */
 
@@ -345,70 +370,93 @@ typedef struct
 
 void *__PHYSFS_platformGetThreadID(void)
 {
-    return ( (void *) ((size_t) pthread_self()) );
+    #ifdef PHYSFS_PLATFORM_WIIU
+        return (void*)OSGetCurrentThread();
+    #else
+        return ( (void *) ((size_t) pthread_self()) );
+    #endif
 } /* __PHYSFS_platformGetThreadID */
 
 
 void *__PHYSFS_platformCreateMutex(void)
 {
-    int rc;
-    PthreadMutex *m = (PthreadMutex *) allocator.Malloc(sizeof (PthreadMutex));
-    BAIL_IF(!m, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
-    rc = pthread_mutex_init(&m->mutex, NULL);
-    if (rc != 0)
-    {
-        allocator.Free(m);
-        BAIL(PHYSFS_ERR_OS_ERROR, NULL);
-    } /* if */
+    #ifdef PHYSFS_PLATFORM_WIIU
+        OSMutex* m = allocator.Malloc(sizeof(OSMutex));
+        BAIL_IF(!m, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+        OSInitMutex(m);
+    #else
+        int rc;
+        PthreadMutex *m = (PthreadMutex *) allocator.Malloc(sizeof (PthreadMutex));
+        BAIL_IF(!m, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+        rc = pthread_mutex_init(&m->mutex, NULL);
+        if (rc != 0)
+        {
+            allocator.Free(m);
+            BAIL(PHYSFS_ERR_OS_ERROR, NULL);
+        } /* if */
 
-    m->count = 0;
-    m->owner = (pthread_t) 0xDEADBEEF;
-    return ((void *) m);
+        m->count = 0;
+        m->owner = (pthread_t) 0xDEADBEEF;
+    #endif
+        return ((void *) m);
 } /* __PHYSFS_platformCreateMutex */
 
 
 void __PHYSFS_platformDestroyMutex(void *mutex)
 {
-    PthreadMutex *m = (PthreadMutex *) mutex;
+    #ifdef PHYSFS_PLATFORM_WIIU
+        allocator.Free((OSMutex*)mutex);
+    #else
+        PthreadMutex *m = (PthreadMutex *) mutex;
 
-    /* Destroying a locked mutex is a bug, but we'll try to be helpful. */
-    if ((m->owner == pthread_self()) && (m->count > 0))
-        pthread_mutex_unlock(&m->mutex);
+        /* Destroying a locked mutex is a bug, but we'll try to be helpful. */
+        if ((m->owner == pthread_self()) && (m->count > 0))
+            pthread_mutex_unlock(&m->mutex);
 
-    pthread_mutex_destroy(&m->mutex);
-    allocator.Free(m);
+        pthread_mutex_destroy(&m->mutex);
+        allocator.Free(m);
+    #endif
 } /* __PHYSFS_platformDestroyMutex */
 
 
 int __PHYSFS_platformGrabMutex(void *mutex)
 {
-    PthreadMutex *m = (PthreadMutex *) mutex;
-    pthread_t tid = pthread_self();
-    if (m->owner != tid)
-    {
-        if (pthread_mutex_lock(&m->mutex) != 0)
-            return 0;
-        m->owner = tid;
-    } /* if */
+    #ifdef PHYSFS_PLATFORM_WIIU
+        OSLockMutex((OSMutex*)mutex);
+    #else
+        PthreadMutex *m = (PthreadMutex *) mutex;
+        pthread_t tid = pthread_self();
+        if (m->owner != tid)
+        {
+            if (pthread_mutex_lock(&m->mutex) != 0)
+                return 0;
+            m->owner = tid;
+        } /* if */
+
+        m->count++;
+    #endif
 
-    m->count++;
     return 1;
 } /* __PHYSFS_platformGrabMutex */
 
 
 void __PHYSFS_platformReleaseMutex(void *mutex)
 {
-    PthreadMutex *m = (PthreadMutex *) mutex;
-    assert(m->owner == pthread_self());  /* catch programming errors. */
-    assert(m->count > 0);  /* catch programming errors. */
-    if (m->owner == pthread_self())
-    {
-        if (--m->count == 0)
+    #ifdef PHYSFS_PLATFORM_WIIU
+        OSUnlockMutex((OSMutex*)mutex);
+    #else
+        PthreadMutex *m = (PthreadMutex *) mutex;
+        assert(m->owner == pthread_self());  /* catch programming errors. */
+        assert(m->count > 0);  /* catch programming errors. */
+        if (m->owner == pthread_self())
         {
-            m->owner = (pthread_t) 0xDEADBEEF;
-            pthread_mutex_unlock(&m->mutex);
+            if (--m->count == 0)
+            {
+                m->owner = (pthread_t) 0xDEADBEEF;
+                pthread_mutex_unlock(&m->mutex);
+            } /* if */
         } /* if */
-    } /* if */
+    #endif
 } /* __PHYSFS_platformReleaseMutex */
 
 #endif  /* PHYSFS_PLATFORM_POSIX */
diff --git a/src/physfs_platform_wiiu.c b/src/physfs_platform_wiiu.c
new file mode 100644
index 0000000..82df9c1
--- /dev/null
+++ b/src/physfs_platform_wiiu.c
@@ -0,0 +1,100 @@
+/*
+ * Nintendo Wii U support routines for PhysicsFS.
+ *
+ * Please see the file LICENSE.txt in the source's root directory.
+ *
+ */
+
+#define __PHYSICSFS_INTERNAL__
+#include "physfs_platforms.h"
+
+#ifdef PHYSFS_PLATFORM_WIIU
+
+// for getcwd
+#include <unistd.h>
+// for PATH_MAX
+#include <limits.h>
+
+#include "physfs_internal.h"
+
+int __PHYSFS_platformInit(void)
+{
+    return 1; /* always succeed. */
+} /* __PHYSFS_platformInit */
+
+void __PHYSFS_platformDeinit(void)
+{
+    /* no-op */
+} /* __PHYSFS_platformDeinit */
+
+void __PHYSFS_platformDetectAvailableCDs(PHYSFS_StringCallback cb, void* data)
+{
+    /* no-op */
+}
+
+char* __PHYSFS_wiiuCalcUserDir(void)
+{
+    /* Use the jail directory (hopefully) found before. */
+    return __PHYSFS_strdup(PHYSFS_getBaseDir());
+}
+
+char* __PHYSFS_platformCalcBaseDir(const char* argv0)
+{
+    char* retval = NULL;
+    /* As there is no system-specific directory, directly inspect argv0. */
+    if (argv0 == NULL)
+    {
+        /* User did not provide a path, just use the current working directory.
+         *  As physfs should be initialized soon after application start, this
+         *  should give us a useable directory.
+         */
+        char fullpath[PATH_MAX];
+        if (getcwd(fullpath, sizeof(fullpath)) != NULL)
+        {
+            const size_t cwdlen = strlen(fullpath);
+            /* getcwd does not provide a trailing slash, add it. */
+            retval = (char*)allocator.Malloc(cwdlen + 2);
+            BAIL_IF(!retval, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+            strncpy(retval, fullpath, cwdlen);
+            retval[cwdlen]     = '/';
+            retval[cwdlen + 1] = '\0';
+        }
+    }
+    else
+    {
+        /* hbmenu should give us the full path of the application, this may
+         *  reside in a subfolder. Higher level code will strip away the name
+         *  and extension.
+         */
+        return NULL;
+    }
+
+    if (!retval)
+        /* Last resort: use `/wiiu` directory. */
+        retval = __PHYSFS_strdup("/wiiu/");
+
+    return retval;
+} /* __PHYSFS_platformCalcBaseDir */
+
+char* __PHYSFS_platformCalcPrefDir(const char* org, const char* app)
+{
+    char* retval = NULL;
+    size_t len   = 0;
+
+    /* Use the jail directory (hopefully) found before. This way we do not
+     *  need to add an application folder, because it is exclusive.
+     */
+    const char* envr = __PHYSFS_getUserDir();
+    BAIL_IF_ERRPASS(!envr, NULL);
+    const char* append = ".config/";
+    len                = strlen(envr) + strlen(append) + 1;
+    retval             = (char*)allocator.Malloc(len);
+    BAIL_IF(!retval, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
+    snprintf(retval, len, "%s%s", envr, append);
+
+    return retval;
+} /* __PHYSFS_platformCalcPrefDir */
+
+#endif /* PHYSFS_PLATFORM_WIIU */
+
+/* end of physfs_platform_wiiu.cpp ... */
diff --git a/src/physfs_platforms.h b/src/physfs_platforms.h
index d4e4bfd..348bc6d 100644
--- a/src/physfs_platforms.h
+++ b/src/physfs_platforms.h
@@ -72,6 +72,10 @@
 #elif defined(unix) || defined(__unix__)
 #  define PHYSFS_PLATFORM_UNIX 1
 #  define PHYSFS_PLATFORM_POSIX 1
+#elif defined(__WIIU__)
+#  define PHYSFS_PLATFORM_POSIX 1
+#  define PHYSFS_PLATFORM_WIIU 1
+#  define PHYSFS_NO_CDROM_SUPPORT 1
 #else
 #  error Unknown platform.
 #endif
